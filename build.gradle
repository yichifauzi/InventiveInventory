plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

def version = System.getenv('VERSION') ?: "1.0.0"
def minecraft_version = System.getenv('MINECRAFT_VERSION') ?: "1.20.1"
def yarn_mappings = System.getenv('YARN_MAPPINGS') ?: "1.20.1+build.10"
def loader_version = System.getenv('LOADER_VERSION') ?: "0.15.11"
def fabric_version = System.getenv('FABRIC_VERSION') ?: "0.92.2+1.20.1"
def modmenu_version = System.getenv('MODMENU_VERSION') ?: "7.1.0"

base {
    archivesName = "inventive_inventory-" + minecraft_version
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    maven {
        url 'https://maven.terraformersmc.com/'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    // Other Mods
    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"
}

processResources {
    filteringCharset "UTF-8"
    filesMatching("fabric.mod.json") {
        expand "version": version,
                "minecraft_version": minecraft_version,
                "fabric_version": fabric_version,
                "loader_version": loader_version,
                "modmenu_version": modmenu_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_inventive_inventory" }
    }
}
